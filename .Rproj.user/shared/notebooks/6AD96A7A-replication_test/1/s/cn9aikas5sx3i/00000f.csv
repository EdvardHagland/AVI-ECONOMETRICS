"0","# --- INTENT: Replicate Table A1 from the paper's appendix, which presents a baseline balance check. ---"
"0","# --- EFFECT: This chunk selects baseline covariates from `mig_wide`, uses the `gtsummary` package to create a formatted summary table comparing these covariates across treatment and control groups, adds significance tests (p-values) for differences, and displays the resulting table. ---"
"0",""
"0","# --- INTENT: Ensure the `gtsummary` package is loaded for creating the balance table. ---"
"0","# --- EFFECT: Loads the `gtsummary` package (likely already loaded in setup). ---"
"0","# Load gtsummary explicitly if not already loaded"
"0","library(gtsummary)"
"0",""
"0","# --- INTENT: Define the specific baseline covariate variable names (columns in `mig_wide`) to be included in the balance check. ---"
"0","# --- EFFECT: Creates a character vector `baseline_vars` containing the names of the relevant columns measured before the treatment intervention began. Comments note variables mentioned in original code/paper but not present or suitable here. ---"
"0","# Select baseline covariates and treatment indicator from mig_wide"
"0","# Note: mg.asp (aspiration) is not measured at baseline"
"0","# Note: gvt.rg.cmpl & bs.supp are not in mig_wide baseline"
"0","baseline_vars <- c("
"0","  ""age"", ""educ"", ""male"", ""Region"", "
"0","  ""bs.exp.now"", ""bs.exp.past"", ""Score"", ""lost.job"", ""job_w1"", "
"0","  ""mg.pln_w1"" # Migration PLANS at baseline"
"0",")"
"0",""
"0","# --- INTENT: Create a subset of the data containing only the treatment indicator and the selected baseline covariates. ---"
"0","# --- EFFECT: Uses `dplyr::select` to create a new tibble `balance_data` containing only the `treat.dum` column and all columns listed in the `baseline_vars` vector from the `mig_wide` dataset. ---"
"0","balance_data <- mig_wide %>% "
"0","  dplyr::select(treat.dum, all_of(baseline_vars))"
"0",""
"0","# --- INTENT: Generate the formatted balance table using `gtsummary::tbl_summary`. ---"
"0","# --- EFFECT: Pipes the `balance_data` into `tbl_summary` and applies several customizations:"
"0","#           - `by = treat.dum`: Specifies that summary statistics should be calculated separately for each level of the treatment dummy (Control vs. Treatment)."
"0","#           - `label = list(...)`: Provides user-friendly display labels for the variables, overriding the technical column names."
"0","#           - `statistic = list(...)`: Defines how statistics should be displayed. Continuous variables show mean (sd), categorical variables show count (percentage)."
"0","#           - `digits = list(...)`: Controls the number of digits displayed for continuous means/SDs and categorical percentages."
"0","#           - `missing = ""no""`: Excludes rows showing counts of missing values."
"0","#           Then, pipes the `tbl_summary` object through further modifications:"
"0","#           - `add_p(test = list(...))`: Calculates and adds p-values comparing the groups. Specifies appropriate statistical tests (`t.test` for continuous, `chisq.test` for categorical) for different variable types. `pvalue_fun` formats the p-value display."
"0","#           - `add_overall()`: Adds an extra column showing summary statistics for the overall sample (both groups combined)."
"0","#           - `modify_header()`: Customizes the header for the variable label column."
"0","#           - `modify_spanning_header()`: Creates a spanning header ""Treatment Status"" over the Control and Treatment columns."
"0","#           - `modify_caption()`: Sets the main caption for the table."
"0","#           - `bold_labels()`: Bolds the variable labels in the first column."
"0","#           Assigns the final formatted table object to `balance_table`. ---"
"0","# Create the balance table using gtsummary"
"0","# - 'by = treat.dum' creates columns for Control (0) and Treatment (1)"
"0","# - 'label =' provides nicer names for variables"
"0","# - 'add_p()' calculates p-values to test for differences (e.g., t-test, chi-sq test)"
"0","# - We might need to adjust statistic types (e.g., show mean/sd for continuous)"
"0",""
"0","balance_table <- balance_data %>% "
"0","  tbl_summary("
"0","    by = treat.dum, "
"0","    label = list( # Nicer labels for display"
"0","      age ~ ""Age"","
"0","      educ ~ ""Education Level"","
"0","      male ~ ""Male"","
"0","      Region ~ ""Region"","
"0","      bs.exp.now ~ ""Currently has business"","
"0","      bs.exp.past ~ ""Had business in past"","
"0","      Score ~ ""Eligibility Score"","
"0","      lost.job ~ ""COVID Job Loss Status"","
"0","      job_w1 ~ ""Has Job (Baseline)"","
"0","      mg.pln_w1 ~ ""Migration Plans (Baseline, 1-3)"""
"0","    ),"
"0","    statistic = list( # Specify stats: mean (sd) for continuous"
"0","      all_continuous() ~ ""{mean} ({sd})"","
"0","      all_categorical() ~ ""{n} ({p}%)"""
"0","    ),"
"0","    digits = list( # Control digits"
"0","      all_continuous() ~ 2,"
"0","      all_categorical() ~ 1"
"0","    ),"
"0","    missing = ""no"" # Don't show missing counts separately"
"0","  ) %>% "
"0","  # Specify correct tests for each variable type"
"0","  add_p(test = list( "
"0","      # Continuous variables"
"0","      all_continuous() ~ ""t.test"", "
"0","      # Multi-category variables"
"0","      c(Region, educ, lost.job, mg.pln_w1) ~ ""chisq.test"","
"0","      # Binary categorical variables (coded 0/1 or similar) "
"0","      # We can list them explicitly or let tbl_summary guess default if appropriate"
"0","      # Explicitly: c(male, bs.exp.now, bs.exp.past, job_w1) ~ ""prop.test"""
"0","      # Or rely on default for binary after handling continuous/multi-category above"
"0","      # Let's try relying on default for remaining (binary) after specifying others"
"0","      # If errors persist for binary vars, specify ""prop.test"" or ""chisq.test"" explicitly"
"0","      all_categorical() ~ ""chisq.test"" # Fallback to chisq for any remaining categoricals"
"0","    ),"
"0","    pvalue_fun = ~style_pvalue(.x, digits = 3)"
"0","  ) %>% "
"0","  add_overall() %>% # Add a column for overall statistics"
"0","  modify_header(label ~ ""**Characteristic**"") %>% "
"0","  modify_spanning_header(c(""stat_1"", ""stat_2"") ~ ""**Treatment Status**"") %>% "
"0","  modify_caption(""**Table A1: Baseline Characteristics by Treatment Status**"") %>% "
"0","  bold_labels()"
"2","[38;5;232mThe following [33mwarnings[38;5;232m were returned during `modify_caption()`:[39m"
"2","[38;5;232m[33m![38;5;232m For variable `Score` (`treat.dum`) and [34m""statistic""[38;5;232m, [34m""p.value""[38;5;232m, and [34m""parameter""[38;5;232m
  statistics: [33mChi-squared approximation may be incorrect[38;5;232m[39m"
"0","# --- INTENT: Display the generated balance table in the Quarto output. ---"
"0","# --- EFFECT: Simply stating the variable name `balance_table` causes R/Quarto to render the `gtsummary` object as a formatted table in the output document. ---"
"0","# Display the table"
"0","balance_table"
