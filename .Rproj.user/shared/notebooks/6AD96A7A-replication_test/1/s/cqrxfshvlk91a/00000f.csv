"0","# --- INTENT: Replicate Figure 2 from the paper (Coefficient Plot) ---"
"0","# --- EFFECT: This entire chunk calculates treatment effects on mediator variables and generates a ggplot object replicating the paper's Figure 2 visualization. ---"
"0",""
"0","# Ensure necessary libraries are loaded (broom, ggplot2, dplyr, RColorBrewer) - Loaded in setup"
"0",""
"0","# Define position dodging for ggplot elements to prevent overlap."
"0","pd <- position_dodge(width = 0.3) # Define position dodge"
"0",""
"0","# Use pastel colors instead"
"0","color_palette <- c(""#95B8D1"", ""#DBC6EB"") # Pastel blue and lavender"
"0",""
"0","# Define the specific mediator variable names as they appear in the `mig_wide` dataset for Wave 2 and Wave 3."
"0","meds_w2 <- c(""self.suff_w2"", ""efficacy_w2"", ""placeat_w2"") "
"0","meds_w3 <- c(""self.suff_w3"", ""efficacy_w3"", ""placeat_w3"")"
"0",""
"0","# Define a reusable function to perform the core regression analysis for a single mediator variable."
"0","run_mediator_lm <- function(mediator, wave_label, weight_var, data) {"
"0","  # Create the formula for the linear model dynamically based on the mediator name."
"0","  formula_str <- paste(mediator, ""~ treat.dum + factor(Region)"")"
"0","  "
"0","  # Filter the dataset to mimic the original script's use of 'nonmissing2'/'nonmissing3' flags by keeping rows with valid weights for the current wave."
"0","  subset_data <- data %>% filter(!is.na(.data[[weight_var]]))"
"0","  "
"0","  # Add robustness checks to prevent errors if mediator variable is missing or has insufficient data after filtering."
"0","  if (!mediator %in% names(subset_data) || all(is.na(subset_data[[mediator]]))) {"
"0","    warning(paste(""Mediator variable"", mediator, ""not found or all NA in subset for"", weight_var))"
"0","    return(NULL)"
"0","  }"
"0","  # Further filter out rows where the *mediator* variable itself is NA to ensure the model runs correctly."
"0","  subset_data <- subset_data %>% filter(!is.na(.data[[mediator]]))"
"0","  # Add another robustness check for a minimum number of observations required to run the regression reliably."
"0","  if (nrow(subset_data) < 10) { # Added check for minimum observations"
"0","     warning(paste(""Insufficient non-NA observations for"", mediator, ""with"", weight_var))"
"0","     return(NULL)"
"0","  }"
"0",""
"0","  # Run the weighted linear regression as specified by the paper's analysis for Figure 2."
"0","  model <- lm(as.formula(formula_str), data = subset_data, weights = subset_data[[weight_var]])"
"0","  "
"0","  # Extract the key results (coefficient, standard error, confidence interval) for the treatment effect ('treat.dum') in a standardized format."
"0","  tidy_model <- broom::tidy(model, conf.int = TRUE) %>%"
"0","    filter(term == ""treat.dum"") %>%"
"0","    mutate(mediator_base = gsub(""_w[23]$"", """", mediator), # Get base name (e.g., ""self.suff"")"
"0","           wave = !!wave_label) # Use descriptive wave label"
"0","  # Return the processed results from the function."
"0","  return(tidy_model)"
"0","}"
"0",""
"0","# Apply the `run_mediator_lm` function to each Wave 2 mediator variable."
"0","results_w2 <- lapply(meds_w2, run_mediator_lm, wave_label = ""Short-term (Wave 2)"", weight_var = ""wt2"", data = mig_wide) %>%"
"0","  bind_rows() %>% "
"0","  filter(!is.null(.)) # Remove NULLs if any model failed"
"0",""
"0","# Apply the `run_mediator_lm` function to each Wave 3 mediator variable."
"0","results_w3 <- lapply(meds_w3, run_mediator_lm, wave_label = ""Long-term (Wave 3)"", weight_var = ""wt3"", data = mig_wide) %>%"
"0","  bind_rows() %>%"
"0","  filter(!is.null(.)) # Remove NULLs if any model failed"
"0",""
"0","# Combine the results from both waves into a single data frame for plotting."
"0","all_results <- bind_rows(results_w2, results_w3)"
"0",""
"0","# Create a mapping from the base mediator variable names (e.g., ""self.suff"") to more descriptive labels suitable for the plot's y-axis, including line breaks."
"0","mediator_labels <- c("
"0","  ""self.suff"" = ""Self-sufficiency"","
"0","  ""efficacy"" = ""Personal efficacy"","
"0","  ""placeat"" = ""Financial success at home"""
"0",")"
"0",""
"0","# Define the desired order of mediator labels on the y-axis, matching the original paper's Figure 2 presentation (top-to-bottom)."
"0","ordered_labels <- c("
"0","    ""Financial success at home"", "
"0","    ""Personal efficacy"","
"0","    ""Self-sufficiency"""
"0",")"
"0",""
"0","# Prepare the final data frame for plotting by adding the display labels and ensuring they are ordered correctly."
"0","plot_data <- all_results %>%"
"0","  mutate(mediator_label = factor(mediator_labels[mediator_base], levels = ordered_labels)) %>% # Use ordered levels"
"0","  filter(!is.na(mediator_label)) # Ensure only valid mediators are plotted"
"0",""
"0","# Create the plot - simpler version with minimal theming"
"0","fig2_plot <- ggplot(plot_data, aes(x = estimate, y = mediator_label, color = wave, shape = wave)) +"
"0","  # Use clean theme with white background"
"0","  theme_bw() +"
"0","  "
"0","  # Reference line at zero"
"0","  geom_vline(xintercept = 0, linetype = ""dashed"", color = ""grey60"", linewidth = 0.7) +"
"0","  "
"0","  # Error bars and points"
"0","  geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0.2, position = pd, linewidth = 0.8) +"
"0","  geom_point(position = pd, size = 3, stroke = 1.2) +"
"0","  "
"0","  # Set colors and shapes"
"0","  scale_color_manual(values = color_palette, name = ""Time Point"") +"
"0","  scale_shape_manual(values = c(""Short-term (Wave 2)"" = 16, ""Long-term (Wave 3)"" = 1), name = ""Time Point"") +"
"0","  "
"0","  # Simple labels"
"0","  labs("
"0","    title = ""Figure 2: Treatment Effects on Psychological Mediators"","
"0","    subtitle = ""Difference-in-means estimates (Treatment - Control) with 95% CIs"","
"0","    x = ""Difference in Means"","
"0","    y = NULL"
"0","  ) +"
"0","  "
"0","  # Clean theme with minimal styling"
"0","  theme("
"0","    # Text elements"
"0","    plot.title = element_text(face = ""bold"", size = 12, hjust = 0.5),"
"0","    plot.subtitle = element_text(size = 10, hjust = 0.5),"
"0","    axis.title.x = element_text(size = 10),"
"0","    axis.text.y = element_text(hjust = 1, face = ""bold""),"
"0","    "
"0","    # Legend"
"0","    legend.position = ""top"","
"0","    legend.box = ""horizontal"","
"0","    legend.title = element_text(face = ""bold""),"
"0","    "
"0","    # Panel"
"0","    panel.grid.major.y = element_blank(),"
"0","    panel.grid.minor = element_blank()"
"0","  ) +"
"0","  "
"0","  # X-axis limits"
"0","  coord_cartesian(xlim = c(-0.3, 0.8))"
"0",""
"0","# Save and display the plot"
"0","ggsave(""figure2.pdf"", plot = fig2_plot, width = 6.5, height = 4.5, device = ""pdf"", dpi = 300)"
"0","print(fig2_plot)"
