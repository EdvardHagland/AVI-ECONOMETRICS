"0","# --- INTENT: Perform randomization inference for the Wave 2 DiD model's interaction term. ---"
"0","# --- EFFECT: Permutes treatment assignment, re-runs the model many times, calculates p-value. ---"
"0","message(""Running Randomization Inference for Wave 2 DiD..."")"
"0",""
"0","# Ensure the original model exists"
"0","if (!exists(""asp.did.w2"")) {"
"0","  stop(""Error in RI test: Original Wave 2 DiD model (asp.did.w2) not found."")"
"0","}"
"0",""
"0","# Extract the observed coefficient for the interaction term"
"0","observed_coef <- coef(summary(asp.did.w2))[""treat.dum:post.dum"", ""Estimate""]"
"0",""
"0","# Prepare data used for the original model"
"0","ri_data <- subset(mig_long, wave != 3 & nonmissing2)"
"0",""
"0","# Number of permutations"
"0","n_perms <- 1000 # Set to a reasonable number, e.g., 1000 or 5000"
"0",""
"0","# Store permutation coefficients"
"0","perm_coefs <- numeric(n_perms)"
"0",""
"0","# Get unique IDs for permutation"
"0","ids <- unique(ri_data$UniqueID)"
"0",""
"0","# Run permutations"
"0","set.seed(123) # for reproducibility"
"0","for (i in 1:n_perms) {"
"0","  # Permute treatment assignment within the full sample (respecting original assignment probability)"
"0","  # Simple permutation: shuffle the treat.dum variable across UniqueIDs"
"0","  perm_treat_map <- data.frame(UniqueID = ids, "
"0","                             treat.dum.perm = sample(mig_wide$treat.dum[mig_wide$UniqueID %in% ids]))"
"0","  "
"0","  # Merge permuted treatment back into the long data"
"0","  ri_data_perm <- ri_data %>% "
"0","    dplyr::select(-treat.dum) %>% "
"0","    left_join(perm_treat_map, by = ""UniqueID"") %>% "
"0","    rename(treat.dum = treat.dum.perm)"
"0","  "
"0","  # Re-run the DiD model with permuted treatment"
"0","  # Use tryCatch to handle potential estimation errors in permutations"
"0","  perm_model <- tryCatch({"
"0","    lm(mg.asp ~ treat.dum*post.dum + factor(Region), "
"0","       data = ri_data_perm, "
"0","       weights = wt2)"
"0","  }, error = function(e) NULL)"
"0","  "
"0","  # Store coefficient if model ran successfully"
"0","  if (!is.null(perm_model) && ""treat.dum:post.dum"" %in% names(coef(perm_model))) {"
"0","    perm_coefs[i] <- coef(perm_model)[""treat.dum:post.dum""]"
"0","  } else {"
"0","    perm_coefs[i] <- NA # Mark as NA if model failed or term missing"
"0","  }"
"0","  "
"0","  # Progress indicator (optional)"
"0","  # if (i %% 100 == 0) { message(paste(""Permutation"", i, ""of"", n_perms)) }"
"0","}"
"0",""
"0","# Calculate the one-sided p-value (how often was permuted effect <= observed?)"
"0","# We expect a negative effect, so look at the lower tail"
"0","ri_p_value_onesided <- mean(perm_coefs <= observed_coef, na.rm = TRUE)"
"0",""
"0","# Calculate the two-sided p-value"
"0","ri_p_value_twosided <- mean(abs(perm_coefs) >= abs(observed_coef), na.rm = TRUE)"
"0",""
"0","# Plot histogram of permuted coefficients"
"0","perm_df <- data.frame(coef = perm_coefs)"
"0","ri_plot <- ggplot(perm_df, aes(x = coef)) + "
"0","  geom_histogram(bins = 30, fill = ""lightblue"", color = ""black"") + "
"0","  geom_vline(xintercept = observed_coef, color = ""red"", linetype = ""dashed"", linewidth = 1) +"
"0","  geom_vline(xintercept = 0, color = ""black"", linetype = ""dotted"") +"
"0","  labs(title = ""Randomization Inference: Wave 2 DiD Effect (Treat x Post)"","
"0","       subtitle = paste0(n_perms, "" Permutations of Treatment Assignment""),"
"0","       x = ""Permuted Coefficient Estimate"","
"0","       y = ""Frequency"") +"
"0","  annotate(""text"", x = observed_coef, y = Inf, "
"0","           label = paste0(""Observed = "", round(observed_coef, 3), ""\nTwo-sided p = "", round(ri_p_value_twosided, 3)), "
"0","           vjust = 1.5, hjust = ifelse(observed_coef < 0, 0, 1), color = ""red"", size = 3.5) + "
"0","  theme_minimal()"
"0",""
"0","print(ri_plot)"
"0",""
