"0","# --- INTENT: Replicate Table 1 from the paper, showing weighted percentages of business outcomes by treatment group in Wave 3. ---"
"0","# --- EFFECT: This chunk processes the `mig_wide` data, calculates weighted means and significance tests for specific business variables, formats the results, and generates a LaTeX table using `kableExtra`. ---"
"0",""
"0","# --- INTENT: Ensure necessary libraries for this specific analysis are loaded. ---"
"0","# --- EFFECT: Loads `dplyr` for data manipulation and `kableExtra` for table formatting (though likely loaded in setup). ---"
"0","# Load necessary libraries (Moved to setup chunk)"
"0","# library(dplyr)"
"0","# library(kableExtra)"
"0",""
"0","# --- INTENT: Prepare the wide-format data for analysis by creating a factor variable for treatment status. ---"
"0","# --- EFFECT: Takes the `mig_wide` tibble, uses `mutate` to create a new column `treat.dum_fac`. This new column converts the numeric `treat.dum` (0/1) into a factor with meaningful labels (""Control"", ""Treatment""). Assigns the result to `mig_business`. ---"
"0","# Prepare the data"
"0","mig_business <- mig_wide %>%"
"0","  # Create factor for treatment"
"0","  mutate(treat.dum_fac = factor(treat.dum, levels = c(0, 1), labels = c(""Control"", ""Treatment"")))"
"0",""
"0","# --- INTENT: Define the specific business outcome variables (columns in `mig_wide`) to be analyzed for Table 1. ---"
"0","# --- EFFECT: Creates a character vector `business_vars` containing the exact names of the columns representing the business outcomes measured in Wave 3. ---"
"0","# Business outcome variables for Wave 3"
"0","business_vars <- c(""bus.location"", ""bus.open"", ""bus.purchases"", ""bus.hire"", ""bus.profit"", ""bus.close"")"
"0",""
"0","# --- INTENT: Create a working dataset by removing rows with missing Wave 3 weights AND ensuring outcome variables are numeric. ---"
"0","# --- EFFECT: Takes `mig_business`, filters out rows where `nonmissing3` is FALSE OR `wt3` is NA. Then converts business vars to numeric. Assigns the result to `filtered_data`. This ensures consistency with lm's handling of weights. ---"
"0","# Create a filtered dataset without NA weights"
"0","filtered_data <- mig_business %>%"
"0","  filter(nonmissing3 & !is.na(wt3)) %>% # Explicitly require nonmissing3 AND non-NA wt3"
"0","  # Ensure business variables are numeric"
"0","  mutate(across(all_of(business_vars), as.numeric))"
"0",""
"0","# --- INTENT: Calculate the weighted means and F-test by treatment group using the pre-filtered data. ---"
"0","results <- lapply(business_vars, function(var) {"
"0",""
"0","  # --- Calculate Weighted Means --- (using na.rm for outcome NAs)"
"0","  # filtered_data already excludes rows with NA weights"
"0","  control_mean <- weighted.mean(filtered_data[[var]][filtered_data$treat.dum == 0],"
"0","                              w = filtered_data$wt3[filtered_data$treat.dum == 0],"
"0","                              na.rm = TRUE) # Handle NAs in the outcome var itself"
"0",""
"0","  treat_mean <- weighted.mean(filtered_data[[var]][filtered_data$treat.dum == 1],"
"0","                            w = filtered_data$wt3[filtered_data$treat.dum == 1],"
"0","                            na.rm = TRUE) # Handle NAs in the outcome var itself"
"0",""
"0","  # --- Calculate F-test --- (using the same pre-filtered data)"
"0","  # lm will still handle NAs in outcome/predictor if any slipped through numeric conversion"
"0","  model <- tryCatch({"
"0","    lm(as.formula(paste(var, ""~ treat.dum"")),"
"0","       data = filtered_data, # Use pre-filtered data"
"0","       weights = wt3)"
"0","  }, error = function(e) NULL)"
"0",""
"0","  # --- Extract Results ---"
"0","  f_value <- NA"
"0","  p_value <- NA"
"0","  if (!is.null(model)) {"
"0","    f_stat_summary <- summary(model)$fstatistic"
"0","    if (!is.null(f_stat_summary) && length(f_stat_summary) >= 3) {"
"0","      f_value <- f_stat_summary[1]"
"0","      df_num <- f_stat_summary[2]"
"0","      df_den <- f_stat_summary[3]"
"0","      if (!is.na(f_value) && !is.na(df_num) && !is.na(df_den) && df_den > 0) {"
"0","        p_value <- pf(f_value, df_num, df_den, lower.tail = FALSE)"
"0","      }"
"0","    }"
"0","  }"
"0",""
"0","  sig_marker <- case_when("
"0","    is.na(p_value) ~ """","
"0","    p_value < 0.001 ~ ""***"","
"0","    p_value < 0.01 ~ ""**"","
"0","    p_value < 0.05 ~ ""*"","
"0","    p_value < 0.1 ~ ""†"","
"0","    TRUE ~ """""
"0","  )"
"0",""
"0","  f_test <- if (!is.na(f_value)) paste0(round(f_value, 2), sig_marker) else ""NA"""
"0",""
"0","  # Return results"
"0","  data.frame("
"0","    Variable = var,"
"0","    Control = control_mean,"
"0","    Treatment = treat_mean,"
"0","    F_test = f_test"
"0","  )"
"0","})"
"0",""
"0","# --- INTENT: Combine the list of individual variable results into a single data frame"
"0","results_df <- bind_rows(results)"
"0",""
"0","# --- INTENT: Calculate the difference in percentage points between Treatment and Control"
"0","results_df <- results_df %>% "
"0","  mutate("
"0","    Difference_pp = (Treatment - Control) * 100"
"0","  )"
"0",""
"0","# --- INTENT: Define user-friendly labels for the business outcome variables to be used in the final table"
"0","# Define nice variable labels"
"0","var_labels <- c("
"0","  ""bus.location"" = ""Selected location"","
"0","  ""bus.open"" = ""Opened business"", "
"0","  ""bus.purchases"" = ""Made purchases"","
"0","  ""bus.hire"" = ""Hired employees"","
"0","  ""bus.profit"" = ""Made profit"","
"0","  ""bus.close"" = ""Closed business"""
"0",")"
"0",""
"0","# --- INTENT: Replace the technical variable names in the results data frame with the user-friendly labels"
"0","# Replace variable names with labels"
"0","results_df$Variable <- var_labels[results_df$Variable]"
"0",""
"0","# --- INTENT: Format the calculated means as percentages and the difference to two decimal places"
"0","results_df <- results_df %>%"
"0","  mutate("
"0","    Control = scales::percent(Control, accuracy = 0.01),"
"0","    Treatment = scales::percent(Treatment, accuracy = 0.01),"
"0","    Difference_pp = sprintf(""%.2f"", Difference_pp) # Format difference to 2 decimal places"
"0","  )"
"0",""
"0","# --- INTENT: Generate the final, formatted LaTeX table"
"0","results_df %>%"
"0","  dplyr::select(Variable, Control, Treatment, Difference_pp, F_test) %>% # Added Difference_pp"
"0","  kbl("
"0","    caption = ""Key Business Outcomes by Treatment Group (Wave 3)"","
"0","    col.names = c(""Outcome"", ""Control (%)"", ""Treatment (%)"", ""Difference (p.p.)"", ""F test""), # Updated ""Test"" to ""F test"""
"0","    align = c(""l"", ""r"", ""r"", ""r"", ""l""), # Changed alignment of F test column from ""r"" to ""l"""
"0","    # digits = 2, # No longer needed after formatting"
"0","    booktabs = TRUE"
"0","  ) %>%"
"0","  # Add styling options"
"0","  kable_styling(latex_options = c(""striped"", ""[H]""), "
"0","                bootstrap_options = ""striped"") %>% "
"0","  # Update to use numbered footnotes"
"0","  footnote("
"0","    number = c(""Significance levels: *** p<0.001, ** p<0.01, * p<0.05, † p<0.1.""), "
"0","    number_title = ""Note: "","
"0","    general = c(""Percentages calculated using Wave 3 inverse probability weights (wt3).""),"
"0","    general_title = """","
"0","    footnote_as_chunk = TRUE,"
"0","    escape = FALSE # Ensure LaTeX symbols render correctly"
"0","  )"
