"0","# --- INTENT: Replicate Figure 2 from the paper (Coefficient Plot) ---"
"0","# --- EFFECT: This entire chunk calculates treatment effects on mediator variables and generates a ggplot object replicating the paper's Figure 2 visualization. ---"
"0",""
"0","# Ensure necessary libraries are loaded (broom, ggplot2, dplyr, RColorBrewer) - Loaded in setup"
"0",""
"0","# Define position dodging for ggplot elements to prevent overlap."
"0","pd <- position_dodge(width = 0.3) # Define position dodge"
"0",""
"0","# Use pastel colors instead"
"0","color_palette <- c(""#95B8D1"", ""#DBC6EB"") # Pastel blue and lavender"
"0",""
"0","# Define the specific mediator variable names as they appear in the `mig_wide` dataset for Wave 2 and Wave 3."
"0","meds_w2 <- c(""self.suff_w2"", ""efficacy_w2"", ""placeat_w2"") "
"0","meds_w3 <- c(""self.suff_w3"", ""efficacy_w3"", ""placeat_w3"")"
"0",""
"0","# --- INTENT: Define a reusable function to perform the core regression analysis for a single mediator variable. ---"
"0","# --- EFFECT: Creates a function `run_mediator_lm` that takes the mediator variable name, a descriptive wave label, the weighting variable name, and the dataset as input. It performs several steps:"
"0","#           1. Constructs the regression formula string."
"0","#           2. Filters the data to include only observations with non-missing weights for the specified wave (proxying the original script's 'nonmissing' flags)."
"0","#           3. Performs checks to ensure the mediator variable exists and has sufficient non-missing data after filtering, returning NULL with a warning if not."
"0","#           4. Runs a weighted linear regression (lm) using the constructed formula, the filtered subset data, and the specified weights."
"0","#           5. Uses `broom::tidy` to extract the results into a clean tibble format, specifically filtering for the 'treat.dum' coefficient."
"0","#           6. Adds columns for the base mediator name (removing _w2/_w3 suffix) and the descriptive wave label."
"0","#           7. Returns the resulting tidy tibble (or NULL if checks failed). ---"
"0","run_mediator_lm <- function(mediator, wave_label, weight_var, data) {"
"0","  # --- INTENT: Create the formula for the linear model dynamically based on the mediator name. ---"
"0","  # --- EFFECT: Concatenates the mediator variable name with the predictor terms (""~ treat.dum + factor(Region)"") into a single string representing the regression formula. ---"
"0","  formula_str <- paste(mediator, ""~ treat.dum + factor(Region)"")"
"0","  "
"0","  # --- INTENT: Filter the dataset to mimic the original script's use of 'nonmissing2'/'nonmissing3' flags by keeping rows with valid weights for the current wave. ---"
"0","  # --- EFFECT: Uses `dplyr::filter` and the `.data` pronoun to keep only rows where the specified `weight_var` column (e.g., ""wt2"") is not NA. ---"
"0","  subset_data <- data %>% filter(!is.na(.data[[weight_var]]))"
"0","  "
"0","  # --- INTENT: Add robustness checks to prevent errors if mediator variable is missing or has insufficient data after filtering. ---"
"0","  # --- EFFECT: Checks if the `mediator` column name exists in `subset_data` and if there are any non-NA values left for it. If not, issues a warning and returns NULL. ---"
"0","  if (!mediator %in% names(subset_data) || all(is.na(subset_data[[mediator]]))) {"
"0","    warning(paste(""Mediator variable"", mediator, ""not found or all NA in subset for"", weight_var))"
"0","    return(NULL)"
"0","  }"
"0","  # --- INTENT: Further filter out rows where the *mediator* variable itself is NA to ensure the model runs correctly. ---"
"0","  # --- EFFECT: Uses `dplyr::filter` again to remove rows with NA in the specific `mediator` column being analyzed. ---"
"0","  subset_data <- subset_data %>% filter(!is.na(.data[[mediator]]))"
"0","  # --- INTENT: Add another robustness check for a minimum number of observations required to run the regression reliably. ---"
"0","  # --- EFFECT: Checks if the number of rows remaining in `subset_data` is less than 10. If so, issues a warning and returns NULL. ---"
"0","  if (nrow(subset_data) < 10) { # Added check for minimum observations"
"0","     warning(paste(""Insufficient non-NA observations for"", mediator, ""with"", weight_var))"
"0","     return(NULL)"
"0","  }"
"0",""
"0","  # --- INTENT: Run the weighted linear regression as specified by the paper's analysis for Figure 2. ---"
"0","  # --- EFFECT: Calls the `lm()` function with:"
"0","  #           - `as.formula(formula_str)`: The dynamically created formula."
"0","  #           - `data = subset_data`: The filtered data frame."
"0","  #           - `weights = subset_data[[weight_var]]`: The vector of weights extracted correctly from the filtered data frame. "
"0","  #           Assigns the resulting `lm` model object to the `model` variable. ---"
"0","  model <- lm(as.formula(formula_str), data = subset_data, weights = subset_data[[weight_var]])"
"0","  "
"0","  # --- INTENT: Extract the key results (coefficient, standard error, confidence interval) for the treatment effect ('treat.dum') in a standardized format. ---"
"0","  # --- EFFECT: Uses `broom::tidy(model, conf.int = TRUE)` to convert the model output into a tibble."
"0","  #           Then, `filter(term == ""treat.dum"")` keeps only the row corresponding to the treatment variable."
"0","  #           Finally, `mutate(...)` adds two new columns:"
"0","  #             - `mediator_base`: Stores the mediator name without the wave suffix (e.g., ""self.suff"")."
"0","  #             - `wave`: Stores the descriptive label passed to the function (e.g., ""Short-term (Wave 2)""). "
"0","  #           Assigns this final tidy tibble to `tidy_model`. ---"
"0","  tidy_model <- broom::tidy(model, conf.int = TRUE) %>%"
"0","    filter(term == ""treat.dum"") %>%"
"0","    mutate(mediator_base = gsub(""_w[23]$"", """", mediator), # Get base name (e.g., ""self.suff"")"
"0","           wave = !!wave_label) # Use descriptive wave label"
"0","  # --- INTENT: Return the processed results from the function. ---"
"0","  # --- EFFECT: Returns the `tidy_model` tibble containing the coefficient and CI for the treatment effect. ---"
"0","  return(tidy_model)"
"0","}"
"0",""
"0","# --- INTENT: Apply the `run_mediator_lm` function to each Wave 2 mediator variable. ---"
"0","# --- EFFECT: Uses `lapply` to iterate through the `meds_w2` vector. For each mediator name, it calls `run_mediator_lm` with the appropriate wave label (""Short-term (Wave 2)""), weight variable (""wt2""), and the `mig_wide` dataset."
"0","#           `bind_rows()` combines the list of resulting tibbles (one for each mediator) into a single tibble."
"0","#           `filter(!is.null(.))` removes any NULL entries that might have resulted from failed model runs (due to robustness checks)."
"0","#           Assigns the combined results for Wave 2 to `results_w2`. ---"
"0","results_w2 <- lapply(meds_w2, run_mediator_lm, wave_label = ""Short-term (Wave 2)"", weight_var = ""wt2"", data = mig_wide) %>%"
"0","  bind_rows() %>% "
"0","  filter(!is.null(.)) # Remove NULLs if any model failed"
"0",""
"0","# --- INTENT: Apply the `run_mediator_lm` function to each Wave 3 mediator variable. ---"
"0","# --- EFFECT: Similar to the Wave 2 process, but iterates through `meds_w3`, uses the label ""Long-term (Wave 3)"", and the weight variable ""wt3""."
"0","#           Assigns the combined results for Wave 3 to `results_w3`. ---"
"0","results_w3 <- lapply(meds_w3, run_mediator_lm, wave_label = ""Long-term (Wave 3)"", weight_var = ""wt3"", data = mig_wide) %>%"
"0","  bind_rows() %>%"
"0","  filter(!is.null(.)) # Remove NULLs if any model failed"
"0",""
"0","# --- INTENT: Combine the results from both waves into a single data frame for plotting. ---"
"0","# --- EFFECT: Uses `bind_rows()` to stack the `results_w2` and `results_w3` tibbles vertically into one tibble called `all_results`. ---"
"0","all_results <- bind_rows(results_w2, results_w3)"
"0",""
"0","# --- INTENT: Create a mapping from the base mediator variable names (e.g., ""self.suff"") to more descriptive labels suitable for the plot's y-axis, including line breaks. ---"
"0","# --- EFFECT: Creates a named character vector `mediator_labels` where names are the base variable names and values are the desired display labels. ---"
"0","mediator_labels <- c("
"0","  ""self.suff"" = ""Self-sufficiency"","
"0","  ""efficacy"" = ""Personal efficacy"","
"0","  ""placeat"" = ""Financial success at home"""
"0",")"
"0",""
"0","# --- INTENT: Define the desired order of mediator labels on the y-axis, matching the original paper's Figure 2 presentation (top-to-bottom). ---"
"0","# --- EFFECT: Creates a character vector `ordered_labels` containing the display labels in the specific order they should appear on the plot. ---"
"0","ordered_labels <- c("
"0","    ""Financial success at home"", "
"0","    ""Personal efficacy"","
"0","    ""Self-sufficiency"""
"0",")"
"0",""
"0","# --- INTENT: Prepare the final data frame for plotting by adding the display labels and ensuring they are ordered correctly. ---"
"0","# --- EFFECT: Takes the `all_results` tibble and adds a new column `mediator_label` by looking up the `mediator_base` name in the `mediator_labels` mapping."
"0","#           It converts `mediator_label` into a factor and explicitly sets its levels using `ordered_labels` to control the y-axis order."
"0","#           It filters out any rows where `mediator_label` might be NA (e.g., if a base name wasn't found in the mapping)."
"0","#           Assigns the final prepared data to `plot_data`. ---"
"0","plot_data <- all_results %>%"
"0","  mutate(mediator_label = factor(mediator_labels[mediator_base], levels = ordered_labels)) %>% # Use ordered levels"
"0","  filter(!is.na(mediator_label)) # Ensure only valid mediators are plotted"
"0",""
"0",""
"0","# --- INTENT: Start the ggplot object creation process, defining the core aesthetics. ---"
"0","fig2_plot <- ggplot(plot_data, aes(x = estimate, y = mediator_label, color = wave, shape = wave)) + "
"0","  "
"0","  # Add a light cream background for a softer look"
"0","  theme_minimal(base_size = 12) +"
"0","  "
"0","  # Add a vertical reference line at x=0 to help visually assess statistical significance."
"0","  geom_vline(xintercept = 0, linetype = ""dashed"", color = ""grey60"", linewidth = 0.7) + "
"0","  "
"0","  # Draw the horizontal confidence interval lines."
"0","  geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0.2, position = pd, linewidth = 0.9) + "
"0","  "
"0","  # Draw the points representing the estimated treatment effects."
"0","  geom_point(position = pd, size = 4.5, stroke = 1.5) + "
"0","  "
"0","  # Define the specific colors to use for the different waves and set the legend title for color."
"0","  scale_color_manual(values = color_palette, name = ""Time Point:"") + "
"0","  "
"0","  # Define the specific shapes to use for the different waves (solid vs. open circle) and set the legend title for shape."
"0","  scale_shape_manual(values = c(""Short-term (Wave 2)"" = 16, ""Long-term (Wave 3)"" = 1), name = ""Time Point:"") + "
"0","  "
"0","  # Set the main titles and axis labels for the plot."
"0","  labs("
"0","    title = ""Figure 2: Treatment Effects on\nPsychological Mediators"","
"0","    subtitle = ""Difference-in-means estimates (Treatment - Control) with 95% CIs"","
"0","    x = ""Difference in Means"","
"0","    y = NULL"
"0","  ) + "
"0","  "
"0","  # Apply a clean base theme and customize various visual elements for improved aesthetics and clarity."
"0","  theme("
"0","    # Background and panel"
"0","    panel.background = element_rect(fill = ""#FAFAF8"", color = ""#666666"", linewidth = 1),"
"0","    plot.background = element_rect(fill = ""#FAFAF8"", color = ""#666666"", linewidth = 1),"
"0","    "
"0","    # Legend styling"
"0","    legend.position = ""top"", "
"0","    legend.title = element_text(face = ""bold""),"
"0","    legend.key = element_rect(fill = ""#FAFAF8"", colour = ""#E5E5E5""),"
"0","    legend.background = element_rect(fill = ""#FAFAF8""),"
"0","    legend.margin = margin(t = 0, r = 0, b = 5, l = 0),"
"0","    "
"0","    # Grid styling"
"0","    panel.grid.major.y = element_blank(),"
"0","    panel.grid.minor = element_blank(),"
"0","    panel.grid.major.x = element_line(color = ""#E5E5E5"", linewidth = 0.4),"
"0","    "
"0","    # Text styling"
"0","    axis.text.y = element_text(hjust = 1, size = 12, face = ""bold"", color = ""#555555""),"
"0","    axis.text.x = element_text(size = 11, color = ""#555555""),"
"0","    axis.title.x = element_text(size = 12, face = ""bold"", margin = margin(t = 12), color = ""#444444""),"
"0","    "
"0","    # Title styling"
"0","    plot.title = element_text(face = ""bold"", size = 16, hjust = 0.5, margin = margin(b = 10)),"
"0","    plot.subtitle = element_text(size = 11, hjust = 0.5, margin = margin(b = 20)),"
"0","    "
"0","    # Overall plot margins"
"0","    plot.margin = margin(20, 20, 20, 20)"
"0","  ) + "
"0","  "
"0","  # Set the specific limits for the x-axis to match the original paper's plot range."
"0","  coord_cartesian(xlim = c(-0.3, 0.8)) # Match x-axis limits of original plot"
"0",""
"0","# Save figure to file and then display it"
"0","ggsave(""figure2.pdf"", plot = fig2_plot, width = 5, height = 5, device = ""pdf"", dpi = 300)"
"0","print(fig2_plot)"
