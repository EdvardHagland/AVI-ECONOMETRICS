# Create the plot - simpler version with minimal theming
fig2_plot <- ggplot(plot_data, aes(x = estimate, y = mediator_label, color = wave, shape = wave)) +
# Use clean theme with white background
theme_bw() +
# Reference line at zero
geom_vline(xintercept = 0, linetype = "dashed", color = "grey60", linewidth = 0.7) +
# Error bars and points
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0.2, position = pd, linewidth = 0.8) +
geom_point(position = pd, size = 3, stroke = 1.2) +
# Set colors and shapes
scale_color_manual(values = color_palette, name = "Time Point") +
scale_shape_manual(values = c("Short-term (Wave 2)" = 16, "Long-term (Wave 3)" = 1), name = "Time Point") +
# Simple labels
labs(
title = "Figure 2: Treatment Effects on Psychological Mediators",
subtitle = "Difference-in-means estimates (Treatment - Control) with 95% CIs",
x = "Difference in Means",
y = NULL
) +
# Clean theme with minimal styling
theme(
# Text elements
plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
plot.subtitle = element_text(size = 10, hjust = 0.5),
axis.title.x = element_text(size = 10),
axis.text.y = element_text(hjust = 1, face = "bold"),
# Legend
legend.position = "top",
legend.box = "horizontal",
legend.title = element_text(face = "bold"),
# Panel
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank()
) +
# X-axis limits
coord_cartesian(xlim = c(-0.3, 0.8))
# Save and display the plot
ggsave("figure2.pdf", plot = fig2_plot, width = 6.5, height = 4.5, device = "pdf", dpi = 300)
print(fig2_plot)
# --- INTENT: Replicate Figure 3 using iterative mediate() calls ---
# message("Figure 3 - Mediation time! Running 1000 simulations... go grab a coffee, this might take a while. Or maybe it'll crash. â˜• / ðŸ’¥")
message("Running Figure 3 mediation analysis...")
# Load necessary libraries (Moved to setup chunk)
# library(mediation)
# library(Hmisc)
# library(tidyverse)
# library(RColorBrewer)
# Define base mediator names (without wave suffix)
mediators_base <- Cs(self.suff, efficacy, placeat)
# Define confounding variables (covariates)
confounders <- Cs(age, educ, male, bs.exp.now, bs.exp.past, Score)
# Treatment variable
treatment <- "treat.dum"
# Create consistent color palette with Figure 2
color_palette <- c("#2b8cbe", "#e66101") # Professional blue and orange
pd <- position_dodge(width = 0.3)
# Initialize an empty list to store results from each mediate() call
results_list <- list()
# --- Loop through each mediator and each wave ---
for (med_base in mediators_base) {
for (wave_num in c(2, 3)) {
# Define wave-specific variables
wave_label <- paste0("Wave ", wave_num)
outcome_var <- paste0("mg.asp_w", wave_num)
mediator_var <- paste0(med_base, "_w", wave_num)
weight_var <- paste0("wt", wave_num)
nonmissing_var <- paste0("nonmissing", wave_num)
wave_time_label <- ifelse(wave_num == 2, "Short-term (Wave 2)", "Long-term (Wave 3)")
# Check if required base data exists
if (!exists("mig_wide")) {
stop("Error: mig_wide not found. Please ensure setup chunk has run.")
}
# Prepare data for this specific mediator/wave using proper nonmissing filter
data_wave_df <- as.data.frame(subset(mig_wide, mig_wide[[nonmissing_var]] == TRUE))
required_cols <- c(outcome_var, mediator_var, treatment, confounders, weight_var)
missing_cols <- setdiff(required_cols, names(data_wave_df))
if (length(missing_cols) > 0) {
next # Skip to next iteration
}
# Filter for complete cases
complete_cases_data <- data_wave_df[complete.cases(data_wave_df[, required_cols]), ]
n_complete <- nrow(complete_cases_data)
# Skip if insufficient data
if (n_complete < 30) {
next
}
# Fit Mediator Model
med_formula_str <- paste(mediator_var, "~", treatment, "+", paste(confounders, collapse=" + "))
med_model <- tryCatch({
lm(as.formula(med_formula_str),
data = complete_cases_data,
weights = complete_cases_data[[weight_var]])
}, error = function(e) {
return(NULL)
})
if (is.null(med_model)) next
# Fit Outcome Model
out_formula_str <- paste(outcome_var, "~", treatment, "*", mediator_var, "+", paste(confounders, collapse=" + "))
out_model <- tryCatch({
lm(as.formula(out_formula_str),
data = complete_cases_data,
weights = complete_cases_data[[weight_var]])
}, error = function(e) {
return(NULL)
})
if (is.null(out_model)) next
# Run Mediation
mediation_result <- tryCatch({
mediate(med_model, out_model,
treat = treatment,
mediator = mediator_var,
sims = 1000)
}, error = function(e) {
return(NULL)
})
# Extract Results if successful
if (!is.null(mediation_result)) {
summary_med <- summary(mediation_result)
# Extract ACME values
if (!is.null(summary_med$d.avg) && length(summary_med$d.avg) == 1 && is.numeric(summary_med$d.avg) &&
!is.null(summary_med$d.avg.ci) && length(summary_med$d.avg.ci) == 2 && is.numeric(summary_med$d.avg.ci)) {
estimate_val <- summary_med$d.avg
conf_low_val <- summary_med$d.avg.ci[1]
conf_high_val <- summary_med$d.avg.ci[2]
if (!is.null(estimate_val) && !is.null(conf_low_val) && !is.null(conf_high_val)) {
results_list[[length(results_list) + 1]] <- data.frame(
mediator = med_base,
estimate = estimate_val,
conf_low = conf_low_val,
conf_high = conf_high_val,
wave = wave_time_label,
stringsAsFactors = FALSE
)
}
}
}
}
}
# --- Combine and Plot Results ---
if (length(results_list) > 0) {
all_med_results <- bind_rows(results_list)
# Create mapping from variable names to nicer labels
mediator_labels <- c(
"self.suff" = "Self-sufficiency",
"efficacy" = "Personal efficacy",
"placeat" = "Financial success at home"
)
# Order for y-axis (from top to bottom)
ordered_labels <- c(
"Financial success at home",
"Personal efficacy",
"Self-sufficiency"
)
# Process results for plotting
plot_data <- all_med_results %>%
mutate(
mediator_label = factor(mediator_labels[mediator], levels = ordered_labels)
) %>%
filter(!is.na(mediator_label))
if (nrow(plot_data) > 0) {
# Create the plot with the same clean style as Figure 2
fig3_plot <- ggplot(plot_data,
aes(x = estimate, y = mediator_label,
color = wave, shape = wave)) +
# Use basic theme
theme_bw() +
# Reference line at zero
geom_vline(xintercept = 0, linetype = "dashed", color = "grey60", linewidth = 0.7) +
# Error bars and points
geom_errorbarh(aes(xmin = conf_low, xmax = conf_high),
height = 0.2, position = pd, linewidth = 0.8) +
geom_point(position = pd, size = 3, stroke = 1.2) +
# Colors and shapes
scale_color_manual(values = color_palette, name = "Time Point") +
scale_shape_manual(values = c("Short-term (Wave 2)" = 16, "Long-term (Wave 3)" = 1),
name = "Time Point") +
# Simple labels
labs(
title = "Figure 3: Average Causal Mediation Effects (ACME)",
subtitle = "Iterative 'mediate' estimates (1000 simulations) with 95% CIs",
x = "Average Causal Mediation Effect (ACME)",
y = NULL
) +
# Minimal theme
theme(
# Text elements
plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
plot.subtitle = element_text(size = 10, hjust = 0.5),
axis.title.x = element_text(size = 10),
axis.text.y = element_text(hjust = 1, face = "bold"),
# Legend
legend.position = "top",
legend.box = "horizontal",
legend.title = element_text(face = "bold"),
# Panel
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank()
) +
# Appropriate x-axis limits
coord_cartesian(xlim = c(-0.15, 0.15))
# Save and display the plot
ggsave("figure3.pdf", plot = fig3_plot, width = 6.5, height = 4.5, device = "pdf", dpi = 300)
print(fig3_plot)
} else {
# message("Plotting skipped: No valid data after processing results.") # Commented out
}
} else {
# message("Plotting skipped: No successful mediation results were obtained from any mediator/wave combination.") # Commented out
}
# --- INTENT: Estimate DiD models replacing region FE with baseline covariates. ---
# --- EFFECT: Runs four lm() models using the original mig_long dataset. ---
message("Running Robustness Check 1: Covariate Adjustment Models...")
# Define baseline covariates (already in mig_long)
baseline_controls <- c("age", "educ", "male", "Score")
baseline_formula_part <- paste(baseline_controls, collapse = " + ")
# Ensure mig_long exists before proceeding
if (!exists("mig_long")) {
stop("Error in robust-covariate-adj-models: mig_long data frame not found.")
}
# Model R1a: DiD (Baseline vs Wave 2, Weighted, Covariates)
asp.did.w2.cov <- lm(as.formula(paste("mg.asp ~ treat.dum*post.dum +", baseline_formula_part)),
data=subset(mig_long, wave!=3 & nonmissing2), # Use mig_long
weights=wt2)
# print(summary(asp.did.w2.cov)) # DEBUG PRINT REMOVED
# Model R1b: DiD (Baseline vs Wave 2, Unweighted, Covariates)
asp.did.w2.cov_unw <- lm(as.formula(paste("mg.asp ~ treat.dum*post.dum +", baseline_formula_part)),
data=subset(mig_long, wave!=3 & nonmissing2)) # Use mig_long
# print(summary(asp.did.w2.cov_unw)) # DEBUG PRINT REMOVED
# Model R1c: DiD (Baseline vs Wave 3, Weighted, Covariates)
asp.did.w3.cov <- lm(as.formula(paste("mg.asp ~ treat.dum*post.dum +", baseline_formula_part)),
data=subset(mig_long, wave!=2 & nonmissing3), # Use mig_long
weights=wt3)
# print(summary(asp.did.w3.cov)) # DEBUG PRINT REMOVED
# Model R1d: DiD (Baseline vs Wave 3, Unweighted, Covariates)
asp.did.w3.cov_unw <- lm(as.formula(paste("mg.asp ~ treat.dum*post.dum +", baseline_formula_part)),
data=subset(mig_long, wave!=2 & nonmissing3)) # Use mig_long
# print(summary(asp.did.w3.cov_unw)) # DEBUG PRINT REMOVED
message("Covariate adjustment models estimated.")
# --- INTENT: Display the results of the covariate adjustment models. ---
# --- EFFECT: Uses modelsummary to create a table comparing original DiD models with covariate-adjusted models. ---
message("Generating table for Robustness Check 1...")
models_cov_adj <- list()
# Add models only if they exist (were estimated successfully previously)
if (exists("asp.did.w2") && !is.null(asp.did.w2)) models_cov_adj[["(2a) W2 DiD Wgt (FE)"]] <- asp.did.w2
if (exists("asp.did.w2.cov") && !is.null(asp.did.w2.cov)) models_cov_adj[["(R1a) W2 DiD Wgt (Cov)"]] <- asp.did.w2.cov
if (exists("asp.did.w2_unw") && !is.null(asp.did.w2_unw)) models_cov_adj[["(2b) W2 DiD Unw (FE)"]] <- asp.did.w2_unw
if (exists("asp.did.w2.cov_unw") && !is.null(asp.did.w2.cov_unw)) models_cov_adj[["(R1b) W2 DiD Unw (Cov)"]] <- asp.did.w2.cov_unw
if (exists("asp.did.w3") && !is.null(asp.did.w3)) models_cov_adj[["(4a) W3 DiD Wgt (FE)"]] <- asp.did.w3
if (exists("asp.did.w3.cov") && !is.null(asp.did.w3.cov)) models_cov_adj[["(R1c) W3 DiD Wgt (Cov)"]] <- asp.did.w3.cov
if (exists("asp.did.w3_unw") && !is.null(asp.did.w3_unw)) models_cov_adj[["(4b) W3 DiD Unw (FE)"]] <- asp.did.w3_unw
if (exists("asp.did.w3.cov_unw") && !is.null(asp.did.w3.cov_unw)) models_cov_adj[["(R1d) W3 DiD Unw (Cov)"]] <- asp.did.w3.cov_unw
# --- DEBUG ---
# print(paste("Number of models found for Covariate Adjustment table:", length(models_cov_adj))) # EH: REMOVED
# --- END DEBUG ---
if (length(models_cov_adj) > 0) {
coef_map_cov <- c("treat.dum" = "Treat assignment",
"post.dum" = "Post-treatment",
"treat.dum:post.dum" = "Treat x Post",
"age" = "Age",
"educ" = "Education",
"male" = "Male",
"Score" = "Score",
"(Intercept)" = "Constant")
gof_map_cov <- list(
list("raw" = "nobs", "clean" = "Observations", "fmt" = 0),
list("raw" = "r.squared", "clean" = "R$^{2}$", "fmt" = 3),
list("raw" = "adj.r.squared", "clean" = "Adj. R$^{2}$", "fmt" = 3)
)
modelsummary(models_cov_adj,
output = "kableExtra",
fmt = 3,
stars = c("â€ " = 0.1, "*" = 0.05, "**" = 0.01, "***" = 0.001),
coef_map = coef_map_cov,
coef_omit = "^factor\\(Region\\)|^\\(Intercept\\)$", # Omit Region factors and Intercept
gof_map = gof_map_cov,
notes = list("Standard errors in parentheses.",
"FE models include Region Fixed Effects.",
"Cov models replace Region FE with baseline Age, Education, Male, Score."),
title = "Robustness Check 1: Sensitivity to Covariate Adjustment vs. Region Fixed Effects",
escape = FALSE
) %>%
kable_styling(latex_options = c("striped", "hold_position", "scale_down"), # Added scale_down
bootstrap_options = "striped",
position = "center",
font_size = 9,
full_width = FALSE) %>%
add_header_above(c(" " = 1, "Wave 2 Models" = 4, "Wave 3 Models" = 4)) %>% # Span headers
column_spec(1, width = "6em")
} else {
message("Skipping Covariate Adjustment table: No models available.")
}
# --- INTENT: Estimate DiD models with interaction terms for HTE using mig_long. ---
# --- EFFECT: Runs lm() models including triple interactions (treat*post*moderator). ---
message("Running Robustness Check 4: Heterogeneity of Treatment Effects (Interactions)...")
# Ensure mig_long exists
if (!exists("mig_long")) {
stop("Error in robust-hte-models: mig_long data frame not found.")
}
# We use the Wave 2 dataset where effects were significant
data_w2_hte <- subset(mig_long, wave != 3 & nonmissing2) # Use mig_long
# Base formula part
base_hte_formula <- "mg.asp ~ treat.dum * post.dum * MODERATOR + factor(Region)"
# Function to create and run HTE model
run_hte_model <- function(moderator_var, data) {
if (!moderator_var %in% names(data)) {
message("Moderator variable '", moderator_var, "' not found. Skipping HTE for this variable.")
return(NULL)
}
# Check for sufficient variation in moderator
if (length(unique(na.omit(data[[moderator_var]]))) < 2) {
message("Moderator variable '", moderator_var, "' has insufficient variation. Skipping HTE.")
return(NULL)
}
formula_str <- gsub("MODERATOR", moderator_var, base_hte_formula)
model <- tryCatch({
lm(as.formula(formula_str), data = data, weights = wt2)
}, error = function(e) {
message("Error fitting HTE model for ", moderator_var, ": ", e$message); return(NULL)
})
# if (!is.null(model)) print(summary(model)) # DEBUG PRINT REMOVED
return(model)
}
# Estimate models for each moderator (using variables confirmed in mig_long)
hte_male <- run_hte_model("male", data_w2_hte)
hte_educ <- run_hte_model("educ", data_w2_hte) # Treat educ as numeric/ordinal
hte_bs_exp <- run_hte_model("bs.exp.now", data_w2_hte)
message("HTE interaction models estimated (if data allowed).")
# --- INTENT: Display results of the HTE models. ---
# --- EFFECT: Uses modelsummary, focusing on the triple interaction term. ---
message("Generating table for Robustness Check 4...")
models_hte <- list()
if (!is.null(hte_male)) models_hte[["Interact: Male"]] <- hte_male
if (!is.null(hte_educ)) models_hte[["Interact: Education"]] <- hte_educ
if (!is.null(hte_bs_exp)) models_hte[["Interact: Has Business"]] <- hte_bs_exp
# Add original model for reference only if it exists
if (exists("asp.did.w2") && !is.null(asp.did.w2)) models_hte[["(2a) Original W2 DiD Wgt"]] <- asp.did.w2
if (length(models_hte) > 1) { # Check if at least one HTE model ran + original
coef_map_hte <- c(
"treat.dum:post.dum" = "Treat x Post (Main Effect)",
"treat.dum:post.dum:male" = "Treat x Post x Male",
"treat.dum:post.dum:educ" = "Treat x Post x Education",
"treat.dum:post.dum:bs.exp.now" = "Treat x Post x Has Business"
)
keep_pattern_hte <- "^treat\\.dum:post\\.dum" # Regex to keep key interactions
gof_map_hte <- list(
list("raw" = "nobs", "clean" = "Observations", "fmt" = 0),
list("raw" = "r.squared", "clean" = "R$^{2}$", "fmt" = 3)
)
modelsummary(models_hte,
output = "kableExtra",
fmt = 3,
stars = c("â€ " = 0.1, "*" = 0.05, "**" = 0.01, "***" = 0.001),
coef_map = coef_map_hte,
coef_matches = keep_pattern_hte,
gof_map = gof_map_hte,
notes = list("Standard errors in parentheses.",
"Models are weighted Wave 2 DiD specifications with Region FE.",
"Each interaction model adds a triple interaction term using baseline moderators.",
"Significance on the triple interaction suggests the treatment effect differs by the moderator."),
title = "Robustness Check 4: Heterogeneity of Treatment Effects (Wave 2)",
escape = FALSE
) %>%
kable_styling(latex_options = c("striped", "hold_position"),
bootstrap_options = "striped",
position = "center",
font_size = 9,
full_width = FALSE) %>%
column_spec(1, width = "12em")
} else {
message("Skipping HTE table generation as no interaction models were successfully fitted or original model missing.")
}
# Load necessary packages
library(lme4)  # For mixed effects models to calculate ICC
# Calculate ICC for Wave 2 model
calc_icc <- function(data, formula_str) {
# Fit a mixed model with random intercept for region
formula <- as.formula(paste(formula_str, "+ (1|Region)"))
re_model <- lmer(formula, data=data)
# Extract variance components
vc <- VarCorr(re_model)
region_var <- attr(vc$Region, "stddev")^2
residual_var <- attr(vc, "sc")^2
# Calculate ICC
icc <- region_var / (region_var + residual_var)
# Return ICC and model
return(list(icc = icc, model = re_model))
}
# Calculate ICC for both waves
w2_icc_result <- calc_icc(
subset(mig_long, wave!=3 & nonmissing2),
"mg.asp ~ treat.dum*post.dum"
)
w3_icc_result <- calc_icc(
subset(mig_long, wave!=2 & nonmissing3),
"mg.asp ~ treat.dum*post.dum"
)
# Extract ICCs
w2_icc <- w2_icc_result$icc
w3_icc <- w3_icc_result$icc
# Create a table of ICCs
icc_table <- data.frame(
Wave = c("Wave 2", "Wave 3"),
ICC = c(w2_icc, w3_icc)
)
# Display ICC table with improved footnote
icc_table %>%
kbl(
caption = "Intraclass Correlation Coefficients (ICC) by Region",
col.names = c("Analysis", "ICC"),
digits = c(0, 3),
align = c("l", "r"),
booktabs = TRUE
) %>%
kable_styling(
latex_options = c("striped", "HOLD_position"),
bootstrap_options = "striped",
position = "center",
font_size = 9,
full_width = FALSE
) %>%
footnote(
general = "ICC measures the proportion of variance attributable to regional clusters.",
footnote_as_chunk = TRUE
)
# Load necessary packages
library(sandwich)  # For robust standard errors
library(lmtest)    # For coeftest
# Define data subsets outside the function so they're available in the global environment
w2_data <- subset(mig_long, wave!=3 & nonmissing2)
w3_data <- subset(mig_long, wave!=2 & nonmissing3)
# Function to create a clean table directly
create_cluster_table <- function() {
# Standard results for Wave 2
w2_coef <- coef(summary(asp.did.w2))["treat.dum:post.dum", "Estimate"]
w2_se <- coef(summary(asp.did.w2))["treat.dum:post.dum", "Std. Error"]
w2_p <- coef(summary(asp.did.w2))["treat.dum:post.dum", "Pr(>|t|)"]
# Clustered results for Wave 2
w2_cl <- coeftest(asp.did.w2, vcov = vcovCL(asp.did.w2, cluster = w2_data$Region))
w2_cl_se <- w2_cl["treat.dum:post.dum", "Std. Error"]
w2_cl_p <- w2_cl["treat.dum:post.dum", "Pr(>|t|)"]
# Standard results for Wave 3
w3_coef <- coef(summary(asp.did.w3))["treat.dum:post.dum", "Estimate"]
w3_se <- coef(summary(asp.did.w3))["treat.dum:post.dum", "Std. Error"]
w3_p <- coef(summary(asp.did.w3))["treat.dum:post.dum", "Pr(>|t|)"]
# Clustered results for Wave 3
w3_cl <- coeftest(asp.did.w3, vcov = vcovCL(asp.did.w3, cluster = w3_data$Region))
w3_cl_se <- w3_cl["treat.dum:post.dum", "Std. Error"]
w3_cl_p <- w3_cl["treat.dum:post.dum", "Pr(>|t|)"]
# Create table with basic R
result <- data.frame(
Model = c("Wave 2 DiD", "Wave 3 DiD"),
Coef = round(c(w2_coef, w3_coef), 3),
Std_SE = round(c(w2_se, w3_se), 3),
Std_p = round(c(w2_p, w3_p), 3),
Clust_SE = round(c(w2_cl_se, w3_cl_se), 3),
Clust_p = round(c(w2_cl_p, w3_cl_p), 3),
SE_Ratio = round(c(w2_cl_se/w2_se, w3_cl_se/w3_se), 2)
)
return(result)
}
# Create table and format with kable
cluster_table <- create_cluster_table()
# Format with kable and styling matching other tables
cluster_table %>%
kbl(
caption = "Effect of Regional Clustering on Standard Errors (DiD Treatment Effect)",
col.names = c("Model", "Coefficient", "Standard SE", "Standard p",
"Clustered SE", "Clustered p", "SE Ratio"),
digits = c(0, 3, 3, 3, 3, 3, 2),
align = c("l", "r", "r", "r", "r", "r", "r"),
booktabs = TRUE
) %>%
kable_styling(
latex_options = c("striped", "HOLD_position"),
bootstrap_options = "striped",
position = "center",
font_size = 9,
full_width = FALSE
) %>%
footnote(
general = "SE Ratio = Clustered SE / Standard SE. Wave 2 p-value changes from 0.009 to 0.056.",
footnote_as_chunk = TRUE
)
# For reference, also show the detailed coefficient info for Wave 2
# Store the detailed output to display it as formatted text
w2_std <- coef(summary(asp.did.w2))["treat.dum:post.dum",]
w2_robust <- coeftest(asp.did.w2, vcov = vcovCL(asp.did.w2, cluster = w2_data$Region))["treat.dum:post.dum",]
# Create a more formatted display of the key coefficient
coef_detail <- data.frame(
"Estimator" = c("Conventional SE", "Cluster-robust SE"),
"Estimate" = c(w2_std[1], w2_robust[1]),
"Std.Error" = c(w2_std[2], w2_robust[2]),
"t-value" = c(w2_std[3], w2_robust[3]),
"p-value" = c(w2_std[4], w2_robust[4])
)
# Format the detailed comparison
coef_detail %>%
kbl(
caption = "Detailed Comparison for Wave 2 DiD 'Treat x Post' Coefficient",
digits = c(0, 3, 3, 2, 3),
align = c("l", "r", "r", "r", "r"),
booktabs = TRUE
) %>%
kable_styling(
latex_options = c("striped", "HOLD_position"),
bootstrap_options = "striped",
position = "center",
font_size = 9,
full_width = FALSE
)
# --- End of Robustness Checks Section ---
message("Robustness check code sections added/corrected.")
